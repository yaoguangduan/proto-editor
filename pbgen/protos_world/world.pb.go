// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: protos_world/world.proto

package protos_world

import (
	protos_animal "github.com/yaoguangduan/proto-editor/pbgen/protos_animal"
	protos_enum "github.com/yaoguangduan/proto-editor/pbgen/protos_enum"
	protos_user "github.com/yaoguangduan/proto-editor/pbgen/protos_user"
	_ "github.com/yaoguangduan/proto-editor/protodef"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnum int32

const (
	TestEnum_Test0 TestEnum = 0
	TestEnum_Test1 TestEnum = 1
	TestEnum_Test2 TestEnum = 2
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "Test0",
		1: "Test1",
		2: "Test2",
	}
	TestEnum_value = map[string]int32{
		"Test0": 0,
		"Test1": 1,
		"Test2": 2,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_world_world_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_protos_world_world_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum.Descriptor instead.
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_protos_world_world_proto_rawDescGZIP(), []int{0}
}

type World struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *int32                           `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Desc              *string                          `protobuf:"bytes,2,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	Alive             *int64                           `protobuf:"varint,3,opt,name=alive,proto3,oneof" json:"alive,omitempty"`
	Location          *float32                         `protobuf:"fixed32,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Weight            *float64                         `protobuf:"fixed64,5,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Manager           *protos_user.User                `protobuf:"bytes,6,opt,name=manager,proto3,oneof" json:"manager,omitempty"`
	Animals           map[int64]*protos_animal.Animal  `protobuf:"bytes,7,rep,name=animals,proto3" json:"animals,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cl                *protos_enum.CivilLevel          `protobuf:"varint,8,opt,name=cl,proto3,enum=CivilLevel,oneof" json:"cl,omitempty"`
	Cost              *uint32                          `protobuf:"varint,9,opt,name=cost,proto3,oneof" json:"cost,omitempty"`
	Area              *int32                           `protobuf:"fixed32,10,opt,name=area,proto3,oneof" json:"area,omitempty"`
	TreeCntMap        map[string]int32                 `protobuf:"bytes,11,rep,name=treeCntMap,proto3" json:"treeCntMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StateRecords      []protos_enum.State              `protobuf:"varint,12,rep,packed,name=stateRecords,proto3,enum=State" json:"stateRecords,omitempty"`
	Logs              []string                         `protobuf:"bytes,13,rep,name=logs,proto3" json:"logs,omitempty"`
	HistoryResults    []bool                           `protobuf:"varint,14,rep,packed,name=historyResults,proto3" json:"historyResults,omitempty"`
	Assistants        map[string]*protos_user.User     `protobuf:"bytes,15,rep,name=assistants,proto3" json:"assistants,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResultCnt         map[bool]uint32                  `protobuf:"bytes,16,rep,name=resultCnt,proto3" json:"resultCnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Tracks            []uint64                         `protobuf:"varint,17,rep,packed,name=tracks,proto3" json:"tracks,omitempty"`
	Health            *bool                            `protobuf:"varint,18,opt,name=health,proto3,oneof" json:"health,omitempty"`
	NeighborNameTypes map[string]protos_enum.WorldType `protobuf:"bytes,19,rep,name=neighborNameTypes,proto3" json:"neighborNameTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=WorldType"`
}

func (x *World) Reset() {
	*x = World{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_world_world_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *World) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*World) ProtoMessage() {}

func (x *World) ProtoReflect() protoreflect.Message {
	mi := &file_protos_world_world_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use World.ProtoReflect.Descriptor instead.
func (*World) Descriptor() ([]byte, []int) {
	return file_protos_world_world_proto_rawDescGZIP(), []int{0}
}

func (x *World) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *World) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *World) GetAlive() int64 {
	if x != nil && x.Alive != nil {
		return *x.Alive
	}
	return 0
}

func (x *World) GetLocation() float32 {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return 0
}

func (x *World) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *World) GetManager() *protos_user.User {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *World) GetAnimals() map[int64]*protos_animal.Animal {
	if x != nil {
		return x.Animals
	}
	return nil
}

func (x *World) GetCl() protos_enum.CivilLevel {
	if x != nil && x.Cl != nil {
		return *x.Cl
	}
	return protos_enum.CivilLevel(0)
}

func (x *World) GetCost() uint32 {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return 0
}

func (x *World) GetArea() int32 {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return 0
}

func (x *World) GetTreeCntMap() map[string]int32 {
	if x != nil {
		return x.TreeCntMap
	}
	return nil
}

func (x *World) GetStateRecords() []protos_enum.State {
	if x != nil {
		return x.StateRecords
	}
	return nil
}

func (x *World) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *World) GetHistoryResults() []bool {
	if x != nil {
		return x.HistoryResults
	}
	return nil
}

func (x *World) GetAssistants() map[string]*protos_user.User {
	if x != nil {
		return x.Assistants
	}
	return nil
}

func (x *World) GetResultCnt() map[bool]uint32 {
	if x != nil {
		return x.ResultCnt
	}
	return nil
}

func (x *World) GetTracks() []uint64 {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *World) GetHealth() bool {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return false
}

func (x *World) GetNeighborNameTypes() map[string]protos_enum.WorldType {
	if x != nil {
		return x.NeighborNameTypes
	}
	return nil
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I32        *int32               `protobuf:"varint,1,opt,name=i32,proto3,oneof" json:"i32,omitempty"`
	I64        *int64               `protobuf:"varint,2,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
	U32        *uint32              `protobuf:"varint,3,opt,name=u32,proto3,oneof" json:"u32,omitempty"`
	U64        *uint64              `protobuf:"varint,4,opt,name=u64,proto3,oneof" json:"u64,omitempty"`
	B          *bool                `protobuf:"varint,11,opt,name=b,proto3,oneof" json:"b,omitempty"`
	Str        *string              `protobuf:"bytes,12,opt,name=str,proto3,oneof" json:"str,omitempty"`
	Bys        []byte               `protobuf:"bytes,13,opt,name=bys,proto3,oneof" json:"bys,omitempty"`
	Te         *TestEnum            `protobuf:"varint,14,opt,name=te,proto3,enum=TestEnum,oneof" json:"te,omitempty"`
	F32        *float32             `protobuf:"fixed32,15,opt,name=f32,proto3,oneof" json:"f32,omitempty"`
	F64        *float64             `protobuf:"fixed64,16,opt,name=f64,proto3,oneof" json:"f64,omitempty"`
	Msg        *TestMsg             `protobuf:"bytes,17,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	I32List    []int32              `protobuf:"varint,18,rep,packed,name=i32List,proto3" json:"i32List,omitempty"`
	I64List    []int64              `protobuf:"varint,28,rep,packed,name=i64List,proto3" json:"i64List,omitempty"`
	U32List    []uint32             `protobuf:"varint,38,rep,packed,name=u32List,proto3" json:"u32List,omitempty"`
	U64List    []uint64             `protobuf:"varint,48,rep,packed,name=u64List,proto3" json:"u64List,omitempty"`
	BList      []bool               `protobuf:"varint,118,rep,packed,name=bList,proto3" json:"bList,omitempty"`
	StrList    []string             `protobuf:"bytes,128,rep,name=strList,proto3" json:"strList,omitempty"`
	TeList     []TestEnum           `protobuf:"varint,148,rep,packed,name=teList,proto3,enum=TestEnum" json:"teList,omitempty"`
	F32List    []float32            `protobuf:"fixed32,158,rep,packed,name=f32List,proto3" json:"f32List,omitempty"`
	F64List    []float64            `protobuf:"fixed64,168,rep,packed,name=f64List,proto3" json:"f64List,omitempty"`
	MsgList    []*TestMsg           `protobuf:"bytes,178,rep,name=msgList,proto3" json:"msgList,omitempty"`
	I32StrMap  map[int32]string     `protobuf:"bytes,19,rep,name=i32StrMap,proto3" json:"i32StrMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StrF32Map  map[string]float32   `protobuf:"bytes,29,rep,name=strF32Map,proto3" json:"strF32Map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	BoolU64Map map[bool]uint64      `protobuf:"bytes,39,rep,name=boolU64Map,proto3" json:"boolU64Map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	U64F64Map  map[uint64]float64   `protobuf:"bytes,49,rep,name=u64F64Map,proto3" json:"u64F64Map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MsgMap     map[int32]*TestMsg   `protobuf:"bytes,59,rep,name=msgMap,proto3" json:"msgMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StrMsgMap  map[string]*PlainMsg `protobuf:"bytes,69,rep,name=strMsgMap,proto3" json:"strMsgMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumMap    map[uint32]TestEnum  `protobuf:"bytes,79,rep,name=enumMap,proto3" json:"enumMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=TestEnum"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_world_world_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_protos_world_world_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_protos_world_world_proto_rawDescGZIP(), []int{1}
}

func (x *Test) GetI32() int32 {
	if x != nil && x.I32 != nil {
		return *x.I32
	}
	return 0
}

func (x *Test) GetI64() int64 {
	if x != nil && x.I64 != nil {
		return *x.I64
	}
	return 0
}

func (x *Test) GetU32() uint32 {
	if x != nil && x.U32 != nil {
		return *x.U32
	}
	return 0
}

func (x *Test) GetU64() uint64 {
	if x != nil && x.U64 != nil {
		return *x.U64
	}
	return 0
}

func (x *Test) GetB() bool {
	if x != nil && x.B != nil {
		return *x.B
	}
	return false
}

func (x *Test) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *Test) GetBys() []byte {
	if x != nil {
		return x.Bys
	}
	return nil
}

func (x *Test) GetTe() TestEnum {
	if x != nil && x.Te != nil {
		return *x.Te
	}
	return TestEnum_Test0
}

func (x *Test) GetF32() float32 {
	if x != nil && x.F32 != nil {
		return *x.F32
	}
	return 0
}

func (x *Test) GetF64() float64 {
	if x != nil && x.F64 != nil {
		return *x.F64
	}
	return 0
}

func (x *Test) GetMsg() *TestMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Test) GetI32List() []int32 {
	if x != nil {
		return x.I32List
	}
	return nil
}

func (x *Test) GetI64List() []int64 {
	if x != nil {
		return x.I64List
	}
	return nil
}

func (x *Test) GetU32List() []uint32 {
	if x != nil {
		return x.U32List
	}
	return nil
}

func (x *Test) GetU64List() []uint64 {
	if x != nil {
		return x.U64List
	}
	return nil
}

func (x *Test) GetBList() []bool {
	if x != nil {
		return x.BList
	}
	return nil
}

func (x *Test) GetStrList() []string {
	if x != nil {
		return x.StrList
	}
	return nil
}

func (x *Test) GetTeList() []TestEnum {
	if x != nil {
		return x.TeList
	}
	return nil
}

func (x *Test) GetF32List() []float32 {
	if x != nil {
		return x.F32List
	}
	return nil
}

func (x *Test) GetF64List() []float64 {
	if x != nil {
		return x.F64List
	}
	return nil
}

func (x *Test) GetMsgList() []*TestMsg {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *Test) GetI32StrMap() map[int32]string {
	if x != nil {
		return x.I32StrMap
	}
	return nil
}

func (x *Test) GetStrF32Map() map[string]float32 {
	if x != nil {
		return x.StrF32Map
	}
	return nil
}

func (x *Test) GetBoolU64Map() map[bool]uint64 {
	if x != nil {
		return x.BoolU64Map
	}
	return nil
}

func (x *Test) GetU64F64Map() map[uint64]float64 {
	if x != nil {
		return x.U64F64Map
	}
	return nil
}

func (x *Test) GetMsgMap() map[int32]*TestMsg {
	if x != nil {
		return x.MsgMap
	}
	return nil
}

func (x *Test) GetStrMsgMap() map[string]*PlainMsg {
	if x != nil {
		return x.StrMsgMap
	}
	return nil
}

func (x *Test) GetEnumMap() map[uint32]TestEnum {
	if x != nil {
		return x.EnumMap
	}
	return nil
}

type TestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1   *int32    `protobuf:"varint,1,opt,name=field1,proto3,oneof" json:"field1,omitempty"`
	Field2   *string   `protobuf:"bytes,2,opt,name=field2,proto3,oneof" json:"field2,omitempty"`
	InnerMsg *PlainMsg `protobuf:"bytes,3,opt,name=innerMsg,proto3,oneof" json:"innerMsg,omitempty"`
}

func (x *TestMsg) Reset() {
	*x = TestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_world_world_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMsg) ProtoMessage() {}

func (x *TestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_world_world_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMsg.ProtoReflect.Descriptor instead.
func (*TestMsg) Descriptor() ([]byte, []int) {
	return file_protos_world_world_proto_rawDescGZIP(), []int{2}
}

func (x *TestMsg) GetField1() int32 {
	if x != nil && x.Field1 != nil {
		return *x.Field1
	}
	return 0
}

func (x *TestMsg) GetField2() string {
	if x != nil && x.Field2 != nil {
		return *x.Field2
	}
	return ""
}

func (x *TestMsg) GetInnerMsg() *PlainMsg {
	if x != nil {
		return x.InnerMsg
	}
	return nil
}

type PlainMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	I32 *int32  `protobuf:"varint,1,opt,name=i32,proto3,oneof" json:"i32,omitempty"`
	Str *string `protobuf:"bytes,2,opt,name=str,proto3,oneof" json:"str,omitempty"`
	B   *bool   `protobuf:"varint,3,opt,name=b,proto3,oneof" json:"b,omitempty"`
}

func (x *PlainMsg) Reset() {
	*x = PlainMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_world_world_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainMsg) ProtoMessage() {}

func (x *PlainMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_world_world_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainMsg.ProtoReflect.Descriptor instead.
func (*PlainMsg) Descriptor() ([]byte, []int) {
	return file_protos_world_world_proto_rawDescGZIP(), []int{3}
}

func (x *PlainMsg) GetI32() int32 {
	if x != nil && x.I32 != nil {
		return *x.I32
	}
	return 0
}

func (x *PlainMsg) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *PlainMsg) GetB() bool {
	if x != nil && x.B != nil {
		return *x.B
	}
	return false
}

var File_protos_world_world_proto protoreflect.FileDescriptor

var file_protos_world_world_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2f, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x88, 0x09, 0x0a, 0x05, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x05, 0x52, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x02, 0x63, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x69, 0x76, 0x69, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x48, 0x06, 0x52, 0x02, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0f, 0x48, 0x08, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a,
	0x74, 0x72, 0x65, 0x65, 0x43, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x43, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x0c, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x72, 0x65, 0x65, 0x43, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x44, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x16, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a,
	0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x04, 0xc0, 0xc1, 0x18, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x63, 0x6c,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xb3, 0x0b,
	0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x69, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x03, 0x69, 0x36,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x02, 0x52, 0x03, 0x75, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x03, 0x75, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x01, 0x62, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x73, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x62, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x03, 0x62, 0x79, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x02, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x07, 0x52, 0x02, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x08, 0x52, 0x03, 0x66, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x36,
	0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09, 0x52, 0x03, 0x66, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x48, 0x0a, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x69,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x30, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x75, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x76, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x80, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x94, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x07, 0x66, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x9e, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x07, 0x66, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x66, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xa8, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x66, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0xb2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x33,
	0x32, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x33, 0x32, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x33, 0x32, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x32,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x46, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x46, 0x33, 0x32, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x46, 0x33, 0x32, 0x4d,
	0x61, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x55, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x55, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x55, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x75, 0x36, 0x34,
	0x46, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x55, 0x36, 0x34, 0x46, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x75, 0x36, 0x34, 0x46, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x6d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x07,
	0x65, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x18, 0x4f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x49, 0x33,
	0x32, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x46,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x36,
	0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x55, 0x36, 0x34, 0x46, 0x36, 0x34, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6c,
	0x61, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x45, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x04, 0xc0, 0xc1, 0x18, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x69, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x36, 0x34, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x75, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x36, 0x34, 0x42, 0x04,
	0x0a, 0x02, 0x5f, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x62, 0x79, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x66, 0x33, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x36, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x73, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x1b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6c,
	0x61, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x61, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x69,
	0x6e, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x73, 0x74, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x01, 0x62, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x33, 0x32, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x62, 0x2a, 0x2b, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x65, 0x73, 0x74, 0x30,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x65, 0x73, 0x74, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x65, 0x73, 0x74, 0x32, 0x10, 0x02, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6f, 0x67, 0x75, 0x61, 0x6e, 0x67, 0x64,
	0x75, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_world_world_proto_rawDescOnce sync.Once
	file_protos_world_world_proto_rawDescData = file_protos_world_world_proto_rawDesc
)

func file_protos_world_world_proto_rawDescGZIP() []byte {
	file_protos_world_world_proto_rawDescOnce.Do(func() {
		file_protos_world_world_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_world_world_proto_rawDescData)
	})
	return file_protos_world_world_proto_rawDescData
}

var file_protos_world_world_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_world_world_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protos_world_world_proto_goTypes = []any{
	(TestEnum)(0),                // 0: TestEnum
	(*World)(nil),                // 1: World
	(*Test)(nil),                 // 2: Test
	(*TestMsg)(nil),              // 3: TestMsg
	(*PlainMsg)(nil),             // 4: PlainMsg
	nil,                          // 5: World.AnimalsEntry
	nil,                          // 6: World.TreeCntMapEntry
	nil,                          // 7: World.AssistantsEntry
	nil,                          // 8: World.ResultCntEntry
	nil,                          // 9: World.NeighborNameTypesEntry
	nil,                          // 10: Test.I32StrMapEntry
	nil,                          // 11: Test.StrF32MapEntry
	nil,                          // 12: Test.BoolU64MapEntry
	nil,                          // 13: Test.U64F64MapEntry
	nil,                          // 14: Test.MsgMapEntry
	nil,                          // 15: Test.StrMsgMapEntry
	nil,                          // 16: Test.EnumMapEntry
	(*protos_user.User)(nil),     // 17: User
	(protos_enum.CivilLevel)(0),  // 18: CivilLevel
	(protos_enum.State)(0),       // 19: State
	(*protos_animal.Animal)(nil), // 20: Animal
	(protos_enum.WorldType)(0),   // 21: WorldType
}
var file_protos_world_world_proto_depIdxs = []int32{
	17, // 0: World.manager:type_name -> User
	5,  // 1: World.animals:type_name -> World.AnimalsEntry
	18, // 2: World.cl:type_name -> CivilLevel
	6,  // 3: World.treeCntMap:type_name -> World.TreeCntMapEntry
	19, // 4: World.stateRecords:type_name -> State
	7,  // 5: World.assistants:type_name -> World.AssistantsEntry
	8,  // 6: World.resultCnt:type_name -> World.ResultCntEntry
	9,  // 7: World.neighborNameTypes:type_name -> World.NeighborNameTypesEntry
	0,  // 8: Test.te:type_name -> TestEnum
	3,  // 9: Test.msg:type_name -> TestMsg
	0,  // 10: Test.teList:type_name -> TestEnum
	3,  // 11: Test.msgList:type_name -> TestMsg
	10, // 12: Test.i32StrMap:type_name -> Test.I32StrMapEntry
	11, // 13: Test.strF32Map:type_name -> Test.StrF32MapEntry
	12, // 14: Test.boolU64Map:type_name -> Test.BoolU64MapEntry
	13, // 15: Test.u64F64Map:type_name -> Test.U64F64MapEntry
	14, // 16: Test.msgMap:type_name -> Test.MsgMapEntry
	15, // 17: Test.strMsgMap:type_name -> Test.StrMsgMapEntry
	16, // 18: Test.enumMap:type_name -> Test.EnumMapEntry
	4,  // 19: TestMsg.innerMsg:type_name -> PlainMsg
	20, // 20: World.AnimalsEntry.value:type_name -> Animal
	17, // 21: World.AssistantsEntry.value:type_name -> User
	21, // 22: World.NeighborNameTypesEntry.value:type_name -> WorldType
	3,  // 23: Test.MsgMapEntry.value:type_name -> TestMsg
	4,  // 24: Test.StrMsgMapEntry.value:type_name -> PlainMsg
	0,  // 25: Test.EnumMapEntry.value:type_name -> TestEnum
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_protos_world_world_proto_init() }
func file_protos_world_world_proto_init() {
	if File_protos_world_world_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_world_world_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*World); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_world_world_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_world_world_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_world_world_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PlainMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_world_world_proto_msgTypes[0].OneofWrappers = []any{}
	file_protos_world_world_proto_msgTypes[1].OneofWrappers = []any{}
	file_protos_world_world_proto_msgTypes[2].OneofWrappers = []any{}
	file_protos_world_world_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_world_world_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_world_world_proto_goTypes,
		DependencyIndexes: file_protos_world_world_proto_depIdxs,
		EnumInfos:         file_protos_world_world_proto_enumTypes,
		MessageInfos:      file_protos_world_world_proto_msgTypes,
	}.Build()
	File_protos_world_world_proto = out.File
	file_protos_world_world_proto_rawDesc = nil
	file_protos_world_world_proto_goTypes = nil
	file_protos_world_world_proto_depIdxs = nil
}
